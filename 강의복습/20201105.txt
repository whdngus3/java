1. 배열
    // 선언                     생성
   데이터형 [] 변수명 = new 데이터형[갯수];
   참조형, 초기값이 숫자는 0, 문자는 null
   % 기본형 : 데이터 초기화해야 사용 가능
2. 2차원 배열
   //        행, 열                              행은 반드시 갯수있어야 함
                                                   열이 갯수가 없을 때는 동적       
   데이터형[][] 변수명 = new 데이터형[갯수][갯수];
   데이터형[][][], 데이터형[][][][] : 사용하지 않음
3. 데이터형[] 변수 = {값, 값,....} ; 선언과 생성과 대입이 동시
4. 출력
   for (int i=0; i<변수.length;i++) {
       System.out.print(변수[i]+"\t");
   }
   for (데이터형 변수 : 배열변수) {
	System.out.print(변수+"\t");
   }
5. 2차원
   for(int i=0; i < 변수.length;i++) {
       for (int j=0;j<변수[i].length;j++) {
           System.out.print(변수[i][j]+"\t");
       }
       System.out.println();
   }
   for(데이터형[] 변수1 : 변수) {
      for(데이터형 변수2: 변수1) {
         System.out.print(변수2+"\t");
      }
     System.out.println();
   }

객체, 클래스
절차지향
객체 = 데이터 + 기능;  // 바로 가져다 사용할 수 있는 상태
클래스 : 객체집합에 설명, 설계서
객체 = 클래스의 인스탄스

객체 
  설계 : 속성(attribute) + 기능(operation)
  구현 : 필드(멤버변수) + method
클래스 구성
  멤버변수(필드);
   ...
  생성자();
  반환형 메서드() {
     실행문
  }

2. 객체지향 프로그램 사용법
   //   객체선언                                         객체생성
  클래스명 객체명(참조명, 레퍼런스변수명) = new 클래스명(); 
  객체 : 참조변수
  객체명.멤버변수;
  객체명.메서드();

Card2
   kind;
   number;
   매개변수 없는 생성자
   종류만 매개변수
   종류와 번호 매개변수
 
  void disp() {
     ========
    종류
    번호
Card2Ex
  매개변수 없는 생성자 ca1 스페이드 1
  종류 하트      번호 7
  종류 다이언드 번호 10



