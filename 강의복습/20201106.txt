1. 클래스 : 설계
    객체 : 설계에 맞게 만든 제품, 사용 가능
    클래스 객체명(레퍼런스 변수명) = new 생성자();
    객체명.멤버변수;
    객체명.메서드();
    객체 : 클래스의 인스탄스, 참조형
    객체 : 데이터(속성, 필드, 멤버변수) + operation(기능, 메서드)
2. 클래스(객체)
   멤버변수(필드) : 속성(attribute)
   생성자
   메서드
3. 멤버변수 : 인스탄스변수, 클래스 변수
   클래스변수 static(공유, 정적) : 객체를 생성하지 않고 클래스명.변수명
       메모리에 로드 될 때 바로 사용 가능
    인스탄스변수 : 객체를 생성할 때 생성
4. 생성자
   클래스와 이름(매개변수,....) {
       실행문;
   }
   모든 클래스는 생성자가 반드시 있어야 한다
   생성자가 없으면 컴파일할 때 생성자를 만들어 줌
   생성자가 하나라도 있으면 기본 생성자를 만들어 주지 않음
   기본(default) 생성자
     public 클래스명() {} - 매개변수도 없고 실행부도 없음
5. 생성자 오버 로딩
   - 생성자가 여러개 있는 경우
   - 매개변수의 갯수가 다르거나 데이터 형이 달라야 한다
6. 초기화 블럭
   { // 인스탄스 초기화 블럭, 객체가 생성 될 때마다 실행
     실행문;
      ..
   }
   static { // 정적 초기화 블럭. 클래스 로딩될 때 한번만 실행
      실행문;
        ...
   }
   실행문이 메서드 안에 있지 안해도 실행하도록 한 것
7. 메소드
   접근 지정자 : public, default, protecte, private
   [접근 지정자] 반환형 메서드명 (매개변수, ....) {
       실행문
   }
   반환할 것이 없는 경우에는 반환형 void
8. 종단변수
   final 데이터형 변수명 = 값;
   변수의 값을 수정할 수 없음
   변수명은 대문자로 표시

